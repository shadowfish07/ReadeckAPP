// Mocks generated by Mockito 5.4.6 from annotations
// in readeck_app/test/unit/domain/use_cases/app_update_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:readeck_app/data/service/app_installer_service.dart' as _i6;
import 'package:readeck_app/data/service/download_service.dart' as _i2;
import 'package:result_dart/result_dart.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DownloadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadService extends _i1.Mock implements _i2.DownloadService {
  MockDownloadService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ResultDart<String, Exception>> downloadFile(
    String? url,
    String? fileName, {
    dynamic Function(
      int,
      int,
    )? onProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [
            url,
            fileName,
          ],
          {#onProgress: onProgress},
        ),
        returnValue: _i3.Future<_i4.ResultDart<String, Exception>>.value(
            _i5.dummyValue<_i4.ResultDart<String, Exception>>(
          this,
          Invocation.method(
            #downloadFile,
            [
              url,
              fileName,
            ],
            {#onProgress: onProgress},
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<String, Exception>>);

  @override
  _i3.Future<bool> fileExists(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #fileExists,
          [filePath],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<int> getFileSize(String? url) => (super.noSuchMethod(
        Invocation.method(
          #getFileSize,
          [url],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [AppInstallerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppInstallerService extends _i1.Mock
    implements _i6.AppInstallerService {
  MockAppInstallerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ResultDart<void, Exception>> installApk(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #installApk,
          [filePath],
        ),
        returnValue: _i3.Future<_i4.ResultDart<void, Exception>>.value(
            _i5.dummyValue<_i4.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #installApk,
            [filePath],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<void, Exception>>);

  @override
  _i3.Future<bool> requestInstallPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestInstallPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> hasInstallPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasInstallPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  String getInstallFileExtension() => (super.noSuchMethod(
        Invocation.method(
          #getInstallFileExtension,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getInstallFileExtension,
            [],
          ),
        ),
      ) as String);

  @override
  bool isSupportedPlatform() => (super.noSuchMethod(
        Invocation.method(
          #isSupportedPlatform,
          [],
        ),
        returnValue: false,
      ) as bool);
}
