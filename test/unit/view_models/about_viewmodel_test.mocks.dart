// Mocks generated by Mockito 5.4.6 from annotations
// in readeck_app/test/unit/view_models/about_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:readeck_app/data/repository/update/update_repository.dart'
    as _i2;
import 'package:readeck_app/domain/models/update/update_info.dart' as _i5;
import 'package:readeck_app/domain/use_cases/app_update_use_case.dart' as _i7;
import 'package:result_dart/result_dart.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UpdateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateRepository extends _i1.Mock implements _i2.UpdateRepository {
  MockUpdateRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ResultDart<_i5.UpdateInfo, Exception>> checkForUpdate() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkForUpdate,
          [],
        ),
        returnValue:
            _i3.Future<_i4.ResultDart<_i5.UpdateInfo, Exception>>.value(
                _i6.dummyValue<_i4.ResultDart<_i5.UpdateInfo, Exception>>(
          this,
          Invocation.method(
            #checkForUpdate,
            [],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<_i5.UpdateInfo, Exception>>);
}

/// A class which mocks [AppUpdateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppUpdateUseCase extends _i1.Mock implements _i7.AppUpdateUseCase {
  MockAppUpdateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ResultDart<void, Exception>> downloadAndInstallUpdate(
    _i5.UpdateInfo? updateInfo, {
    dynamic Function(
      int,
      int,
    )? onProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadAndInstallUpdate,
          [updateInfo],
          {#onProgress: onProgress},
        ),
        returnValue: _i3.Future<_i4.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #downloadAndInstallUpdate,
            [updateInfo],
            {#onProgress: onProgress},
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<void, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<String, Exception>> downloadUpdate(
    _i5.UpdateInfo? updateInfo, {
    dynamic Function(
      int,
      int,
    )? onProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUpdate,
          [updateInfo],
          {#onProgress: onProgress},
        ),
        returnValue: _i3.Future<_i4.ResultDart<String, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<String, Exception>>(
          this,
          Invocation.method(
            #downloadUpdate,
            [updateInfo],
            {#onProgress: onProgress},
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<String, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<void, Exception>> installUpdate(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #installUpdate,
          [filePath],
        ),
        returnValue: _i3.Future<_i4.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #installUpdate,
            [filePath],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<void, Exception>>);

  @override
  _i3.Future<int> getUpdateFileSize(_i5.UpdateInfo? updateInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpdateFileSize,
          [updateInfo],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
