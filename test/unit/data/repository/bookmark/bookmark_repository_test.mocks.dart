// Mocks generated by Mockito 5.4.6 from annotations
// in readeck_app/test/unit/data/repository/bookmark/bookmark_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:readeck_app/data/repository/article/article_repository.dart'
    as _i10;
import 'package:readeck_app/data/repository/reading_stats/reading_stats_repository.dart'
    as _i8;
import 'package:readeck_app/data/service/readeck_api_client.dart' as _i2;
import 'package:readeck_app/domain/models/bookmark/bookmark.dart' as _i5;
import 'package:readeck_app/domain/models/bookmark/label_info.dart' as _i7;
import 'package:readeck_app/utils/reading_stats_calculator.dart' as _i9;
import 'package:result_dart/result_dart.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ReadeckApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadeckApiClient extends _i1.Mock implements _i2.ReadeckApiClient {
  MockReadeckApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void updateConfig(
    String? host,
    String? token,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateConfig,
          [
            host,
            token,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i4.ResultDart<List<_i5.Bookmark>, Exception>> getBookmarks({
    String? search,
    String? title,
    String? author,
    String? site,
    String? type,
    List<String>? labels,
    bool? isLoaded,
    bool? hasErrors,
    bool? hasLabels,
    bool? isMarked,
    bool? isArchived,
    String? rangeStart,
    String? rangeEnd,
    String? readStatus,
    String? updatedSince,
    List<String>? ids,
    String? collection,
    String? sort,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookmarks,
          [],
          {
            #search: search,
            #title: title,
            #author: author,
            #site: site,
            #type: type,
            #labels: labels,
            #isLoaded: isLoaded,
            #hasErrors: hasErrors,
            #hasLabels: hasLabels,
            #isMarked: isMarked,
            #isArchived: isArchived,
            #rangeStart: rangeStart,
            #rangeEnd: rangeEnd,
            #readStatus: readStatus,
            #updatedSince: updatedSince,
            #ids: ids,
            #collection: collection,
            #sort: sort,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i3.Future<_i4.ResultDart<List<_i5.Bookmark>, Exception>>.value(
                _i6.dummyValue<_i4.ResultDart<List<_i5.Bookmark>, Exception>>(
          this,
          Invocation.method(
            #getBookmarks,
            [],
            {
              #search: search,
              #title: title,
              #author: author,
              #site: site,
              #type: type,
              #labels: labels,
              #isLoaded: isLoaded,
              #hasErrors: hasErrors,
              #hasLabels: hasLabels,
              #isMarked: isMarked,
              #isArchived: isArchived,
              #rangeStart: rangeStart,
              #rangeEnd: rangeEnd,
              #readStatus: readStatus,
              #updatedSince: updatedSince,
              #ids: ids,
              #collection: collection,
              #sort: sort,
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<List<_i5.Bookmark>, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<Map<String, dynamic>, Exception>> updateBookmark(
    String? bookmarkId, {
    String? title,
    bool? isMarked,
    bool? isArchived,
    bool? isDeleted,
    int? readProgress,
    String? readAnchor,
    List<String>? labels,
    List<String>? addLabels,
    List<String>? removeLabels,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBookmark,
          [bookmarkId],
          {
            #title: title,
            #isMarked: isMarked,
            #isArchived: isArchived,
            #isDeleted: isDeleted,
            #readProgress: readProgress,
            #readAnchor: readAnchor,
            #labels: labels,
            #addLabels: addLabels,
            #removeLabels: removeLabels,
          },
        ),
        returnValue:
            _i3.Future<_i4.ResultDart<Map<String, dynamic>, Exception>>.value(
                _i6.dummyValue<_i4.ResultDart<Map<String, dynamic>, Exception>>(
          this,
          Invocation.method(
            #updateBookmark,
            [bookmarkId],
            {
              #title: title,
              #isMarked: isMarked,
              #isArchived: isArchived,
              #isDeleted: isDeleted,
              #readProgress: readProgress,
              #readAnchor: readAnchor,
              #labels: labels,
              #addLabels: addLabels,
              #removeLabels: removeLabels,
            },
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<Map<String, dynamic>, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<List<_i7.LabelInfo>, Exception>> getLabels() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLabels,
          [],
        ),
        returnValue:
            _i3.Future<_i4.ResultDart<List<_i7.LabelInfo>, Exception>>.value(
                _i6.dummyValue<_i4.ResultDart<List<_i7.LabelInfo>, Exception>>(
          this,
          Invocation.method(
            #getLabels,
            [],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<List<_i7.LabelInfo>, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<String, Exception>> getBookmarkArticle(
          String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookmarkArticle,
          [bookmarkId],
        ),
        returnValue: _i3.Future<_i4.ResultDart<String, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<String, Exception>>(
          this,
          Invocation.method(
            #getBookmarkArticle,
            [bookmarkId],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<String, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<void, Exception>> deleteBookmark(
          String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBookmark,
          [bookmarkId],
        ),
        returnValue: _i3.Future<_i4.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #deleteBookmark,
            [bookmarkId],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<void, Exception>>);
}

/// A class which mocks [ReadingStatsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadingStatsRepository extends _i1.Mock
    implements _i8.ReadingStatsRepository {
  MockReadingStatsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<
      _i4.ResultDart<_i9.ReadingStatsForView,
          Exception>> calculateAndSaveReadingStats(
    String? bookmarkId,
    String? htmlContent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateAndSaveReadingStats,
          [
            bookmarkId,
            htmlContent,
          ],
        ),
        returnValue: _i3
            .Future<_i4.ResultDart<_i9.ReadingStatsForView, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<_i9.ReadingStatsForView, Exception>>(
          this,
          Invocation.method(
            #calculateAndSaveReadingStats,
            [
              bookmarkId,
              htmlContent,
            ],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<_i9.ReadingStatsForView, Exception>>);

  @override
  _i3.Future<
      _i4.ResultDart<_i9.ReadingStatsForView, Exception>> getReadingStats(
          String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReadingStats,
          [bookmarkId],
        ),
        returnValue: _i3
            .Future<_i4.ResultDart<_i9.ReadingStatsForView, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<_i9.ReadingStatsForView, Exception>>(
          this,
          Invocation.method(
            #getReadingStats,
            [bookmarkId],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<_i9.ReadingStatsForView, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<void, Exception>> deleteReadingStats(
          String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReadingStats,
          [bookmarkId],
        ),
        returnValue: _i3.Future<_i4.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #deleteReadingStats,
            [bookmarkId],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<void, Exception>>);
}

/// A class which mocks [ArticleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRepository extends _i1.Mock implements _i10.ArticleRepository {
  MockArticleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ResultDart<String, Exception>> getBookmarkArticle(
          String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookmarkArticle,
          [bookmarkId],
        ),
        returnValue: _i3.Future<_i4.ResultDart<String, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<String, Exception>>(
          this,
          Invocation.method(
            #getBookmarkArticle,
            [bookmarkId],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<String, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<void, Exception>> deleteBookmarkArticle(
          String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBookmarkArticle,
          [bookmarkId],
        ),
        returnValue: _i3.Future<_i4.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #deleteBookmarkArticle,
            [bookmarkId],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<void, Exception>>);

  @override
  _i3.Stream<_i4.ResultDart<String, Exception>> translateBookmarkContentStream(
    String? bookmarkId,
    String? originalContent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #translateBookmarkContentStream,
          [
            bookmarkId,
            originalContent,
          ],
        ),
        returnValue: _i3.Stream<_i4.ResultDart<String, Exception>>.empty(),
      ) as _i3.Stream<_i4.ResultDart<String, Exception>>);

  @override
  _i3.Future<_i4.ResultDart<void, Exception>> clearTranslationCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTranslationCache,
          [],
        ),
        returnValue: _i3.Future<_i4.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i4.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #clearTranslationCache,
            [],
          ),
        )),
      ) as _i3.Future<_i4.ResultDart<void, Exception>>);
}
