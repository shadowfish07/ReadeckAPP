// Mocks generated by Mockito 5.4.6 from annotations
// in readeck_app/test/ui/settings/widgets/ai_tag_settings_screen_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:flutter_command/flutter_command.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:readeck_app/ui/settings/view_models/ai_tag_settings_viewmodel.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommand_0<TParam, TResult> extends _i1.SmartFake
    implements _i2.Command<TParam, TResult> {
  _FakeCommand_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AiTagSettingsViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAiTagSettingsViewModel extends _i1.Mock
    implements _i3.AiTagSettingsViewModel {
  @override
  _i2.Command<String, void> get saveAiTagTargetLanguage => (super.noSuchMethod(
        Invocation.getter(#saveAiTagTargetLanguage),
        returnValue: _FakeCommand_0<String, void>(
          this,
          Invocation.getter(#saveAiTagTargetLanguage),
        ),
        returnValueForMissingStub: _FakeCommand_0<String, void>(
          this,
          Invocation.getter(#saveAiTagTargetLanguage),
        ),
      ) as _i2.Command<String, void>);

  @override
  String get aiTagTargetLanguage => (super.noSuchMethod(
        Invocation.getter(#aiTagTargetLanguage),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#aiTagTargetLanguage),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#aiTagTargetLanguage),
        ),
      ) as String);

  @override
  String get aiTagModel => (super.noSuchMethod(
        Invocation.getter(#aiTagModel),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#aiTagModel),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#aiTagModel),
        ),
      ) as String);

  @override
  String get aiTagModelName => (super.noSuchMethod(
        Invocation.getter(#aiTagModelName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#aiTagModelName),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#aiTagModelName),
        ),
      ) as String);

  @override
  set saveAiTagTargetLanguage(
          _i2.Command<String, void>? _saveAiTagTargetLanguage) =>
      super.noSuchMethod(
        Invocation.setter(
          #saveAiTagTargetLanguage,
          _saveAiTagTargetLanguage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
