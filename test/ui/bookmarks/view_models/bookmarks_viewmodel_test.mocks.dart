// Mocks generated by Mockito 5.4.6 from annotations
// in readeck_app/test/ui/bookmarks/view_models/bookmarks_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:readeck_app/data/repository/bookmark/bookmark_repository.dart'
    as _i2;
import 'package:readeck_app/data/repository/label/label_repository.dart'
    as _i10;
import 'package:readeck_app/domain/models/bookmark/bookmark.dart' as _i7;
import 'package:readeck_app/domain/models/bookmark/label_info.dart' as _i11;
import 'package:readeck_app/domain/models/bookmark_display_model/bookmark_display_model.dart'
    as _i3;
import 'package:readeck_app/domain/use_cases/bookmark_operation_use_cases.dart'
    as _i8;
import 'package:readeck_app/utils/reading_stats_calculator.dart' as _i9;
import 'package:result_dart/result_dart.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BookmarkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarkRepository extends _i1.Mock
    implements _i2.BookmarkRepository {
  MockBookmarkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.BookmarkDisplayModel> get bookmarks => (super.noSuchMethod(
        Invocation.getter(#bookmarks),
        returnValue: <_i3.BookmarkDisplayModel>[],
      ) as List<_i3.BookmarkDisplayModel>);

  @override
  void addListener(_i2.BookmarkChangeListener? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i2.BookmarkChangeListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.BookmarkDisplayModel? getCachedBookmark(String? id) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedBookmark,
        [id],
      )) as _i3.BookmarkDisplayModel?);

  @override
  List<_i3.BookmarkDisplayModel?> getCachedBookmarks(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedBookmarks,
          [ids],
        ),
        returnValue: <_i3.BookmarkDisplayModel?>[],
      ) as List<_i3.BookmarkDisplayModel?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>
      loadBookmarksByIds(List<String>? ids) => (super.noSuchMethod(
            Invocation.method(
              #loadBookmarksByIds,
              [ids],
            ),
            returnValue: _i4.Future<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>,
                    Exception>>.value(_i6.dummyValue<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>(
              this,
              Invocation.method(
                #loadBookmarksByIds,
                [ids],
              ),
            )),
          ) as _i4.Future<
              _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>
      loadUnarchivedBookmarks({
    int? limit = 10,
    int? page = 1,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #loadUnarchivedBookmarks,
              [],
              {
                #limit: limit,
                #page: page,
              },
            ),
            returnValue: _i4.Future<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>,
                    Exception>>.value(_i6.dummyValue<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>(
              this,
              Invocation.method(
                #loadUnarchivedBookmarks,
                [],
                {
                  #limit: limit,
                  #page: page,
                },
              ),
            )),
          ) as _i4.Future<
              _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>
      loadArchivedBookmarks({
    int? limit = 10,
    int? page = 1,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #loadArchivedBookmarks,
              [],
              {
                #limit: limit,
                #page: page,
              },
            ),
            returnValue: _i4.Future<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>,
                    Exception>>.value(_i6.dummyValue<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>(
              this,
              Invocation.method(
                #loadArchivedBookmarks,
                [],
                {
                  #limit: limit,
                  #page: page,
                },
              ),
            )),
          ) as _i4.Future<
              _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>
      loadMarkedBookmarks({
    int? limit = 10,
    int? page = 1,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #loadMarkedBookmarks,
              [],
              {
                #limit: limit,
                #page: page,
              },
            ),
            returnValue: _i4.Future<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>,
                    Exception>>.value(_i6.dummyValue<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>(
              this,
              Invocation.method(
                #loadMarkedBookmarks,
                [],
                {
                  #limit: limit,
                  #page: page,
                },
              ),
            )),
          ) as _i4.Future<
              _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>
      loadRandomUnarchivedBookmarks(int? randomCount) => (super.noSuchMethod(
            Invocation.method(
              #loadRandomUnarchivedBookmarks,
              [randomCount],
            ),
            returnValue: _i4.Future<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>,
                    Exception>>.value(_i6.dummyValue<
                _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>(
              this,
              Invocation.method(
                #loadRandomUnarchivedBookmarks,
                [randomCount],
              ),
            )),
          ) as _i4.Future<
              _i5.ResultDart<List<_i3.BookmarkDisplayModel>, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<void, Exception>> toggleMarked(
          _i7.Bookmark? bookmark) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleMarked,
          [bookmark],
        ),
        returnValue: _i4.Future<_i5.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i5.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #toggleMarked,
            [bookmark],
          ),
        )),
      ) as _i4.Future<_i5.ResultDart<void, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<void, Exception>> toggleArchived(
          _i7.Bookmark? bookmark) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleArchived,
          [bookmark],
        ),
        returnValue: _i4.Future<_i5.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i5.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #toggleArchived,
            [bookmark],
          ),
        )),
      ) as _i4.Future<_i5.ResultDart<void, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<void, Exception>> updateLabels(
    _i7.Bookmark? bookmark,
    List<String>? labels,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLabels,
          [
            bookmark,
            labels,
          ],
        ),
        returnValue: _i4.Future<_i5.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i5.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #updateLabels,
            [
              bookmark,
              labels,
            ],
          ),
        )),
      ) as _i4.Future<_i5.ResultDart<void, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<void, Exception>> updateReadProgress(
    _i7.Bookmark? bookmark,
    int? readProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateReadProgress,
          [
            bookmark,
            readProgress,
          ],
        ),
        returnValue: _i4.Future<_i5.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i5.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #updateReadProgress,
            [
              bookmark,
              readProgress,
            ],
          ),
        )),
      ) as _i4.Future<_i5.ResultDart<void, Exception>>);

  @override
  _i4.Future<_i5.ResultDart<void, Exception>> deleteBookmark(
          String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBookmark,
          [bookmarkId],
        ),
        returnValue: _i4.Future<_i5.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i5.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #deleteBookmark,
            [bookmarkId],
          ),
        )),
      ) as _i4.Future<_i5.ResultDart<void, Exception>>);
}

/// A class which mocks [BookmarkOperationUseCases].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarkOperationUseCases extends _i1.Mock
    implements _i8.BookmarkOperationUseCases {
  MockBookmarkOperationUseCases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.ResultDart<void, Exception>> openUrl(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #openUrl,
          [url],
        ),
        returnValue: _i4.Future<_i5.ResultDart<void, Exception>>.value(
            _i6.dummyValue<_i5.ResultDart<void, Exception>>(
          this,
          Invocation.method(
            #openUrl,
            [url],
          ),
        )),
      ) as _i4.Future<_i5.ResultDart<void, Exception>>);

  @override
  _i4.Future<Map<String, _i9.ReadingStatsForView>> loadReadingStatsForBookmarks(
          List<_i7.Bookmark>? bookmarks) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadReadingStatsForBookmarks,
          [bookmarks],
        ),
        returnValue: _i4.Future<Map<String, _i9.ReadingStatsForView>>.value(
            <String, _i9.ReadingStatsForView>{}),
      ) as _i4.Future<Map<String, _i9.ReadingStatsForView>>);

  @override
  _i4.Future<_i9.ReadingStatsForView?> loadReadingStatsForBookmark(
          _i7.Bookmark? bookmark) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadReadingStatsForBookmark,
          [bookmark],
        ),
        returnValue: _i4.Future<_i9.ReadingStatsForView?>.value(),
      ) as _i4.Future<_i9.ReadingStatsForView?>);
}

/// A class which mocks [LabelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLabelRepository extends _i1.Mock implements _i10.LabelRepository {
  MockLabelRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i11.LabelInfo> get labels => (super.noSuchMethod(
        Invocation.getter(#labels),
        returnValue: <_i11.LabelInfo>[],
      ) as List<_i11.LabelInfo>);

  @override
  List<String> get labelNames => (super.noSuchMethod(
        Invocation.getter(#labelNames),
        returnValue: <String>[],
      ) as List<String>);

  @override
  void addListener(_i10.LabelChangeListener? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.LabelChangeListener? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insertOrUpdateLabel(_i11.LabelInfo? label) => super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateLabel,
          [label],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.LabelInfo? getCachedLabel(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedLabel,
        [name],
      )) as _i11.LabelInfo?);

  @override
  List<_i11.LabelInfo> getCachedLabels(List<String>? names) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedLabels,
          [names],
        ),
        returnValue: <_i11.LabelInfo>[],
      ) as List<_i11.LabelInfo>);

  @override
  _i4.Future<_i5.ResultDart<List<_i11.LabelInfo>, Exception>> loadLabels() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadLabels,
          [],
        ),
        returnValue:
            _i4.Future<_i5.ResultDart<List<_i11.LabelInfo>, Exception>>.value(
                _i6.dummyValue<_i5.ResultDart<List<_i11.LabelInfo>, Exception>>(
          this,
          Invocation.method(
            #loadLabels,
            [],
          ),
        )),
      ) as _i4.Future<_i5.ResultDart<List<_i11.LabelInfo>, Exception>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
