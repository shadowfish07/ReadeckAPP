// Mocks generated by Mockito 5.4.6 from annotations
// in readeck_app/test/ui/bookmarks/widgets/bookmark_detail_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter_command/flutter_command.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:readeck_app/domain/models/bookmark/bookmark.dart' as _i3;
import 'package:readeck_app/ui/bookmarks/view_models/bookmark_detail_viewmodel.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommand_0<TParam, TResult> extends _i1.SmartFake
    implements _i2.Command<TParam, TResult> {
  _FakeCommand_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookmark_1 extends _i1.SmartFake implements _i3.Bookmark {
  _FakeBookmark_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [BookmarkDetailViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarkDetailViewModel extends _i1.Mock
    implements _i5.BookmarkDetailViewModel {
  MockBookmarkDetailViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Command<void, String> get loadArticleContent => (super.noSuchMethod(
        Invocation.getter(#loadArticleContent),
        returnValue: _FakeCommand_0<void, String>(
          this,
          Invocation.getter(#loadArticleContent),
        ),
      ) as _i2.Command<void, String>);

  @override
  _i2.Command<int, void> get updateReadProgressCommand => (super.noSuchMethod(
        Invocation.getter(#updateReadProgressCommand),
        returnValue: _FakeCommand_0<int, void>(
          this,
          Invocation.getter(#updateReadProgressCommand),
        ),
      ) as _i2.Command<int, void>);

  @override
  _i2.Command<String, void> get openUrl => (super.noSuchMethod(
        Invocation.getter(#openUrl),
        returnValue: _FakeCommand_0<String, void>(
          this,
          Invocation.getter(#openUrl),
        ),
      ) as _i2.Command<String, void>);

  @override
  _i2.Command<void, void> get archiveBookmarkCommand => (super.noSuchMethod(
        Invocation.getter(#archiveBookmarkCommand),
        returnValue: _FakeCommand_0<void, void>(
          this,
          Invocation.getter(#archiveBookmarkCommand),
        ),
      ) as _i2.Command<void, void>);

  @override
  _i2.Command<void, void> get toggleMarkCommand => (super.noSuchMethod(
        Invocation.getter(#toggleMarkCommand),
        returnValue: _FakeCommand_0<void, void>(
          this,
          Invocation.getter(#toggleMarkCommand),
        ),
      ) as _i2.Command<void, void>);

  @override
  _i2.Command<void, void> get deleteBookmarkCommand => (super.noSuchMethod(
        Invocation.getter(#deleteBookmarkCommand),
        returnValue: _FakeCommand_0<void, void>(
          this,
          Invocation.getter(#deleteBookmarkCommand),
        ),
      ) as _i2.Command<void, void>);

  @override
  _i2.Command<void, List<String>> get loadLabels => (super.noSuchMethod(
        Invocation.getter(#loadLabels),
        returnValue: _FakeCommand_0<void, List<String>>(
          this,
          Invocation.getter(#loadLabels),
        ),
      ) as _i2.Command<void, List<String>>);

  @override
  _i2.Command<void, void> get translateContentCommand => (super.noSuchMethod(
        Invocation.getter(#translateContentCommand),
        returnValue: _FakeCommand_0<void, void>(
          this,
          Invocation.getter(#translateContentCommand),
        ),
      ) as _i2.Command<void, void>);

  @override
  _i3.Bookmark get bookmark => (super.noSuchMethod(
        Invocation.getter(#bookmark),
        returnValue: _FakeBookmark_1(
          this,
          Invocation.getter(#bookmark),
        ),
      ) as _i3.Bookmark);

  @override
  String get articleHtml => (super.noSuchMethod(
        Invocation.getter(#articleHtml),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#articleHtml),
        ),
      ) as String);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isTranslating => (super.noSuchMethod(
        Invocation.getter(#isTranslating),
        returnValue: false,
      ) as bool);

  @override
  bool get isTranslated => (super.noSuchMethod(
        Invocation.getter(#isTranslated),
        returnValue: false,
      ) as bool);

  @override
  bool get isTranslateMode => (super.noSuchMethod(
        Invocation.getter(#isTranslateMode),
        returnValue: false,
      ) as bool);

  @override
  bool get isTranslateBannerVisible => (super.noSuchMethod(
        Invocation.getter(#isTranslateBannerVisible),
        returnValue: false,
      ) as bool);

  @override
  bool get canStartTranslate => (super.noSuchMethod(
        Invocation.getter(#canStartTranslate),
        returnValue: false,
      ) as bool);

  @override
  List<String> get availableLabels => (super.noSuchMethod(
        Invocation.getter(#availableLabels),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set loadArticleContent(_i2.Command<void, String>? _loadArticleContent) =>
      super.noSuchMethod(
        Invocation.setter(
          #loadArticleContent,
          _loadArticleContent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set updateReadProgressCommand(
          _i2.Command<int, void>? _updateReadProgressCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #updateReadProgressCommand,
          _updateReadProgressCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set openUrl(_i2.Command<String, void>? _openUrl) => super.noSuchMethod(
        Invocation.setter(
          #openUrl,
          _openUrl,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set archiveBookmarkCommand(
          _i2.Command<void, void>? _archiveBookmarkCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #archiveBookmarkCommand,
          _archiveBookmarkCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set toggleMarkCommand(_i2.Command<void, void>? _toggleMarkCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #toggleMarkCommand,
          _toggleMarkCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set deleteBookmarkCommand(_i2.Command<void, void>? _deleteBookmarkCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #deleteBookmarkCommand,
          _deleteBookmarkCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set loadLabels(_i2.Command<void, List<String>>? _loadLabels) =>
      super.noSuchMethod(
        Invocation.setter(
          #loadLabels,
          _loadLabels,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set translateContentCommand(
          _i2.Command<void, void>? _translateContentCommand) =>
      super.noSuchMethod(
        Invocation.setter(
          #translateContentCommand,
          _translateContentCommand,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void retry() => super.noSuchMethod(
        Invocation.method(
          #retry,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> updateBookmarkLabels(List<String>? labels) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBookmarkLabels,
          [labels],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void toggleTranslation() => super.noSuchMethod(
        Invocation.method(
          #toggleTranslation,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void hideTranslateBanner() => super.noSuchMethod(
        Invocation.method(
          #hideTranslateBanner,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetTranslation() => super.noSuchMethod(
        Invocation.method(
          #resetTranslation,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
