// Mocks generated by Mockito 5.4.6 from annotations
// in readeck_app/test/ui/daily_read/widgets/daily_read_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i6;

import 'package:flutter_command/flutter_command.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:readeck_app/domain/models/bookmark/bookmark.dart' as _i7;
import 'package:readeck_app/domain/models/bookmark_display_model/bookmark_display_model.dart'
    as _i4;
import 'package:readeck_app/ui/daily_read/view_models/daily_read_viewmodel.dart'
    as _i3;
import 'package:readeck_app/utils/reading_stats_calculator.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommand_0<TParam, TResult> extends _i1.SmartFake
    implements _i2.Command<TParam, TResult> {
  _FakeCommand_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DailyReadViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDailyReadViewModel extends _i1.Mock
    implements _i3.DailyReadViewModel {
  @override
  _i2.Command<bool, List<_i4.BookmarkDisplayModel>> get load =>
      (super.noSuchMethod(
        Invocation.getter(#load),
        returnValue: _FakeCommand_0<bool, List<_i4.BookmarkDisplayModel>>(
          this,
          Invocation.getter(#load),
        ),
        returnValueForMissingStub:
            _FakeCommand_0<bool, List<_i4.BookmarkDisplayModel>>(
          this,
          Invocation.getter(#load),
        ),
      ) as _i2.Command<bool, List<_i4.BookmarkDisplayModel>>);

  @override
  _i2.Command<String, void> get openUrl => (super.noSuchMethod(
        Invocation.getter(#openUrl),
        returnValue: _FakeCommand_0<String, void>(
          this,
          Invocation.getter(#openUrl),
        ),
        returnValueForMissingStub: _FakeCommand_0<String, void>(
          this,
          Invocation.getter(#openUrl),
        ),
      ) as _i2.Command<String, void>);

  @override
  _i2.Command<_i4.BookmarkDisplayModel, void> get toggleBookmarkArchived =>
      (super.noSuchMethod(
        Invocation.getter(#toggleBookmarkArchived),
        returnValue: _FakeCommand_0<_i4.BookmarkDisplayModel, void>(
          this,
          Invocation.getter(#toggleBookmarkArchived),
        ),
        returnValueForMissingStub:
            _FakeCommand_0<_i4.BookmarkDisplayModel, void>(
          this,
          Invocation.getter(#toggleBookmarkArchived),
        ),
      ) as _i2.Command<_i4.BookmarkDisplayModel, void>);

  @override
  _i2.Command<_i4.BookmarkDisplayModel, void> get toggleBookmarkMarked =>
      (super.noSuchMethod(
        Invocation.getter(#toggleBookmarkMarked),
        returnValue: _FakeCommand_0<_i4.BookmarkDisplayModel, void>(
          this,
          Invocation.getter(#toggleBookmarkMarked),
        ),
        returnValueForMissingStub:
            _FakeCommand_0<_i4.BookmarkDisplayModel, void>(
          this,
          Invocation.getter(#toggleBookmarkMarked),
        ),
      ) as _i2.Command<_i4.BookmarkDisplayModel, void>);

  @override
  _i2.Command<void, List<String>> get loadLabels => (super.noSuchMethod(
        Invocation.getter(#loadLabels),
        returnValue: _FakeCommand_0<void, List<String>>(
          this,
          Invocation.getter(#loadLabels),
        ),
        returnValueForMissingStub: _FakeCommand_0<void, List<String>>(
          this,
          Invocation.getter(#loadLabels),
        ),
      ) as _i2.Command<void, List<String>>);

  @override
  bool get isNoMore => (super.noSuchMethod(
        Invocation.getter(#isNoMore),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i4.BookmarkDisplayModel> get bookmarks => (super.noSuchMethod(
        Invocation.getter(#bookmarks),
        returnValue: <_i4.BookmarkDisplayModel>[],
        returnValueForMissingStub: <_i4.BookmarkDisplayModel>[],
      ) as List<_i4.BookmarkDisplayModel>);

  @override
  List<_i4.BookmarkDisplayModel> get unArchivedBookmarks => (super.noSuchMethod(
        Invocation.getter(#unArchivedBookmarks),
        returnValue: <_i4.BookmarkDisplayModel>[],
        returnValueForMissingStub: <_i4.BookmarkDisplayModel>[],
      ) as List<_i4.BookmarkDisplayModel>);

  @override
  List<String> get availableLabels => (super.noSuchMethod(
        Invocation.getter(#availableLabels),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  set load(_i2.Command<bool, List<_i4.BookmarkDisplayModel>>? _load) =>
      super.noSuchMethod(
        Invocation.setter(
          #load,
          _load,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set openUrl(_i2.Command<String, void>? _openUrl) => super.noSuchMethod(
        Invocation.setter(
          #openUrl,
          _openUrl,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set toggleBookmarkArchived(
          _i2.Command<_i4.BookmarkDisplayModel, void>?
              _toggleBookmarkArchived) =>
      super.noSuchMethod(
        Invocation.setter(
          #toggleBookmarkArchived,
          _toggleBookmarkArchived,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set toggleBookmarkMarked(
          _i2.Command<_i4.BookmarkDisplayModel, void>? _toggleBookmarkMarked) =>
      super.noSuchMethod(
        Invocation.setter(
          #toggleBookmarkMarked,
          _toggleBookmarkMarked,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set loadLabels(_i2.Command<void, List<String>>? _loadLabels) =>
      super.noSuchMethod(
        Invocation.setter(
          #loadLabels,
          _loadLabels,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.ReadingStatsForView? getReadingStats(String? bookmarkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReadingStats,
          [bookmarkId],
        ),
        returnValueForMissingStub: null,
      ) as _i5.ReadingStatsForView?);

  @override
  void setOnBookmarkArchivedCallback(_i6.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnBookmarkArchivedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setNavigateToDetailCallback(void Function(_i7.Bookmark)? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setNavigateToDetailCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleBookmarkTap(_i4.BookmarkDisplayModel? bookmark) =>
      super.noSuchMethod(
        Invocation.method(
          #handleBookmarkTap,
          [bookmark],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> updateBookmarkLabels(
    _i4.BookmarkDisplayModel? bookmark,
    List<String>? labels,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBookmarkLabels,
          [
            bookmark,
            labels,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
