name: Release

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

on:
  push:
    branches:
      - main
      - beta
  workflow_dispatch:
    inputs:
      skip_approval:
        description: 'Ë∑≥ËøáÊâãÂä®Á°ÆËÆ§Ê≠•È™§'
        required: false
        default: false
        type: boolean

jobs:
  test:
    uses: ./.github/workflows/test.yml
    permissions:
      contents: read
      pull-requests: write
      actions: read

  dry_run_check:
    name: Check if Release is Needed (Dry Run)
    runs-on: ubuntu-latest
    needs: test
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore: sync beta with main') &&
      !github.event.inputs.skip_approval
    outputs:
      needs_release: ${{ steps.check_release.outputs.needs_release }}
      next_version: ${{ steps.check_release.outputs.next_version }}
      release_notes: ${{ steps.check_release.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install semantic-release dependencies
        run: npm ci

      - name: Check if release is needed
        id: check_release
        run: |
          echo "Ê≠£Âú®Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂèëÂ∏ÉÊñ∞ÁâàÊú¨..."
          
          # ËøêË°å semantic-release dry-run Ê£ÄÊü•ÊòØÂê¶ÊúâÊñ∞ÁâàÊú¨
          SEMANTIC_OUTPUT=$(npx semantic-release --dry-run --no-ci 2>&1)
          echo "$SEMANTIC_OUTPUT"
          
          # Ê£ÄÊü•ÊòØÂê¶‰ºöÂàõÂª∫Êñ∞ÁâàÊú¨
          if echo "$SEMANTIC_OUTPUT" | grep -q "The next release version is"; then
            NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+\.[0-9]+)?')
            echo "‚úÖ Ê£ÄÊµãÂà∞ÈúÄË¶ÅÂèëÂ∏ÉÊñ∞ÁâàÊú¨: $NEXT_VERSION"
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
            
            # ÊèêÂèñÂèëÂ∏ÉËØ¥Êòé
            RELEASE_NOTES=$(echo "$SEMANTIC_OUTPUT" | sed -n '/Release note/,/^$/p' | head -20)
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è  Êó†ÈúÄÂèëÂ∏ÉÊñ∞ÁâàÊú¨ - Ê≤°ÊúâÊ£ÄÊµãÂà∞Á¨¶ÂêàÁâàÊú¨ÂèëÂ∏ÉÊù°‰ª∂ÁöÑÊèê‰∫§"
            echo "needs_release=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  approval:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    needs: [test, dry_run_check]
    if: |
      needs.dry_run_check.outputs.needs_release == 'true' &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore: sync beta with main') &&
      !github.event.inputs.skip_approval
    environment: production-approval
    steps:
      - name: Manual approval checkpoint
        run: |
          echo "üöÄ ÂáÜÂ§áÂèëÂ∏ÉÊñ∞ÁâàÊú¨ÔºåÁ≠âÂæÖÊâãÂä®Á°ÆËÆ§..."
          echo "üìã ÂèëÂ∏É‰ø°ÊÅØ:"
          echo "  ‚Ä¢ ÂàÜÊîØ: ${{ github.ref }}"
          echo "  ‚Ä¢ ÁâàÊú¨: ${{ needs.dry_run_check.outputs.next_version }}"
          echo "  ‚Ä¢ Êèê‰∫§: ${{ github.event.head_commit.message }}"
          echo "  ‚Ä¢ Êèê‰∫§ËÄÖ: ${{ github.event.head_commit.author.name }}"
          echo ""
          echo "üìù ÂèëÂ∏ÉËØ¥Êòé:"
          echo "${{ needs.dry_run_check.outputs.release_notes }}"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, dry_run_check, approval]
    if: |
      (needs.dry_run_check.outputs.needs_release == 'true' &&
       github.event_name == 'push' && 
       (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') &&
       !contains(github.event.head_commit.message, '[skip ci]') &&
       !contains(github.event.head_commit.message, 'chore: sync beta with main')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_approval == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install semantic-release dependencies
        run: npm ci

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ${{ runner.tool_cache }}/flutter
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.1"
          channel: "stable"
          cache: true

      - name: Cache Pub dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Get dependencies
        run: flutter pub get

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Prepare version for build
        id: prepare_version
        run: |
          # Use the version determined in dry_run_check
          NEXT_VERSION="${{ needs.dry_run_check.outputs.next_version }}"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "has_release=true" >> $GITHUB_OUTPUT
          
          # Update pubspec.yaml with the new version
          sed -i "s/^version: .*/version: $NEXT_VERSION/" pubspec.yaml
          echo "‚úÖ Updated pubspec.yaml version to: $NEXT_VERSION"

      - name: Setup signing
        if: steps.prepare_version.outputs.has_release == 'true'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-key.jks
          echo "storeFile=release-key.jks" > key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> key.properties

      - name: Build signed APK
        if: steps.prepare_version.outputs.has_release == 'true'
        run: flutter build apk --release

      - name: Build App Bundle
        if: steps.prepare_version.outputs.has_release == 'true'
        continue-on-error: true
        run: flutter build appbundle --release

      - name: Prepare release assets
        if: steps.prepare_version.outputs.has_release == 'true'
        run: |
          mkdir -p release-files
          VERSION=${{ steps.prepare_version.outputs.next_version }}

          # Copy APK if exists
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            cp build/app/outputs/flutter-apk/app-release.apk release-files/readeck-app-${VERSION}.apk
          fi

          # Copy AAB if exists
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            cp build/app/outputs/bundle/release/app-release.aab release-files/readeck-app-${VERSION}.aab
          fi

      - name: Clean up signing files
        if: steps.prepare_version.outputs.has_release == 'true' && env.KEYSTORE_BASE64 != ''
        run: |
          rm -f android/app/release-key.jks
          rm -f android/key.properties
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Run semantic-release
        if: steps.prepare_version.outputs.has_release == 'true'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
